template
  require(from="./menus.css")

  // SAMPLE
  mdc-grid
    mdc-grid-cell(span="12")
      h4 Menus
    
    // CONFIG AREA
    mdc-grid-cell(span="6")
      mdc-list(dense="true")
        mdc-list-item
          a(href="#bindingmodel") Binding items model and menu value
        mdc-list-item
          a(href="#openstate") Open state
        mdc-list-item
          a(href="#quickopen") Quick open
        mdc-list-item
          a(href="#positioningthemenu") Positioning the menu
        mdc-list-item
          a(href="#menuanchorcorner") Menu anchor corner
        mdc-list-item
          a(href="#iconinmenuitem") Icon in menu item
              

    // DEMO AREA
    mdc-grid-cell(span="6")

      // default theme
      section.components
        h5 Example
        .mdc-menu-anchor
          button(mdc-button="raised: true;" click.delegate="showMenu1()") Button 1
          mdc-menu(
            view-model.ref="menuElement1" 
            on-cancel.delegate="onCancel1()"
            on-select.delegate="onSelect1($event)")
            mdc-list-item 
              | Item 1
              span(slot="start")
                i.material-icons(aria-hidden="true") network_wifi                  
            mdc-list-item 
              span(slot="start")
                i.material-icons(aria-hidden="true") network_wifi
              span(slot="text")
                | Item 1.5
            mdc-list-item(disabled="true") Item 2
            mdc-list-item(model="item") Item 3
            mdc-list-divider
            mdc-list-item Item 4

        br
        p Last event menu 1: ${lastEvent1 | stringify}

        .mdc-menu-anchor
          button(mdc-button="raised: true;" click.delegate="showMenu2()") Button 2
          mdc-menu(
            view-model.ref="menuElement2"
            on-cancel.delegate="onCancel2()"
            on-select.delegate="onSelect2($event)")

            mdc-list-item Item 1
            mdc-list-item(disabled="true") Item 2
            mdc-list-item Item 3
            mdc-list-divider
            mdc-list-item Item 4
        br
        p Last event menu 2: ${lastEvent2 | stringify}


    // LINKS
    mdc-grid-cell(span="12")
      hr
      a(href="https://material.io/components/web/catalog/menus/" target="_blank" data-analytics-category="external" data-analytics-action="mdc-menu") Material components documentation
      br
      a(href="https://material.io/guidelines/components/menus.html" target="_blank" data-analytics-category="external" data-analytics-action="mdg-simple-menu") Material design guidelines
      hr    

    // EXAMPLE
    mdc-grid-cell(span="12")
      pre
        code-prism(language="typescript").
          import { MdcMenu, IMdcMenuSelectedEvent, MdcMenuAnchorCorner } from 'aurelia-mdc-bridge';

          private menuElement: MdcMenu;

          // menu state
          isOpen = menuElement.open;
          // open menu
          menuElement.open = true;
          // close menu
          menuElement.open = false;

          // open menu
          menuElement.show();
          // show (open) menu, and focus the menu item at index 1.
          menuElement.show({focusIndex: 1});
          // close menu
          menuElement.close();

          // open menu from bottom right
          menuElement.anchorCorner = MdcMenuAnchorCorner.bottomRight;

          // menu item is selected
          private onSelect(event: IMdcMenuSelectedEvent) {
            // event.detail.item: HTMLElement (The DOM element for the selected item)
            // event.detail.index: number (The index of the selected item)
          }

          //  menu is closed with no selection made
          private onCancel() {
          }
      
      pre
        code-prism(language="html").
          &lt;mdc-menu view-model.ref="menuElement" on-select.delegate="onSelect($event)" on-cancel.delegate="onCancel()"&gt;
            &lt;mdc-list-item&gt;Item 1&lt;/mdc-list-item&gt;
            &lt;mdc-list-item disabled="true"&gt;Item 2&lt;/mdc-list-item&gt;
            &lt;mdc-list-item&gt;Item 3&lt;/mdc-list-item&gt;
            &lt;mdc-list-divider&gt;&lt;/mdc-list-divider&gt;
            &lt;mdc-list-item&gt;Item 4&lt;/mdc-list-item&gt;
          &lt;/mdc-menu&gt;
    
    
    // BINDING MODEL
    mdc-grid-cell(span="12")
      section(id="bindingmodel")
        h5 Binding items model and menu value
        p.
          You can bind a variable to #[span.mark-text value] attribute on #[span.mark-text mdc-menu]
          element and get a #[span.mark-text model] from selected #[span.mark-text mdc-list-item].
        p.
          It is also possible to focus item based on value.

    mdc-grid-cell(span="6")
      pre
        code-prism(language="typescript").
          private menuElement: MdcMenu;

          private menuItems = [
            { id: 1, text: 'Item 1' },
            { id: 2, text: 'Item 2' },
            { id: 3, text: 'Item 3' },
            { id: 4, text: 'Item 4' }
          ];            
          private selectedMenuItem = this.menuItems[1];

          private showMenu() {
            this.menuElement.show({focusValue: true});
          }

    mdc-grid-cell(span="6")
      .mdc-menu-anchor
        button(mdc-button="raised: true;" click.delegate="showMenu3()") Show Menu
        mdc-menu(view-model.ref="menuElement3" value.bind="selectedMenuItem")
          mdc-list-item(
            repeat.for="item of menuItems3" 
            model.bind="item") ${item.text}

        br
        p Selected item: ${selectedMenuItem | stringify}


    mdc-grid-cell(span="12")
      pre
        code-prism.
          &lt;mdc-menu view-model.ref="menuElement" value.bind="selectedMenuItem"&gt;
            &lt;mdc-list-item 
              repeat.for="item of menuItems" 
              model.bind="item"&gt;${item.text}
            &lt;/mdc-list-item&gt;
          &lt;/mdc-menu&gt;

          &lt;p&gt;${selectedMenuItem}&lt;/p&gt;


    // OPEN STATE
    mdc-grid-cell(span="9")
      section(id="openstate")
        h5 Open State
        p.
          The menu can be configured to start in the opened state by adding #[span.mark-text open-state="true"] attribute to the #[span.mark-text mdc-menu] element.

    mdc-grid-cell(span="3")
      mdc-menu(open-state="true")
        mdc-list-item Item 1
        mdc-list-item Item 2
        mdc-list-item Item 3
        mdc-list-item Item 4
      br

    // QUICK OPEN
    mdc-grid-cell(span="12")
      section(id="quickopen")
        h5 Quick Open
        p.
          To open menu without animation add #[span.mark-text quick-open="true"] attribute to the #[span.mark-text mdc-menu] element.

        .mdc-menu-anchor
          button(mdc-button="raised: true;" click.delegate="showMenuQO()") Show Menu
          mdc-menu(quick-open="true" view-model.ref="menuElementQO")
            mdc-list-item Item 1
            mdc-list-item Item 2
            mdc-list-item Item 3
            mdc-list-item Item 4
        br

    // POSITIONING THE MENU
    mdc-grid-cell(span="12")
      section(id="positioningthemenu")
        h5 Positioning the menu
        p.
          The menu can either be positioned manually, or automatically, 
          by anchoring it to an element.

        // AUTOMATIC POSITIONING
        h5 Automatic positioning
        p.
          The menu understands the concept of an anchor, which it can use 
          to determine how to position itself, and which corner to open from.

        p The anchor can either be a visible element that the menu is a child of:

        pre
          code-prism.
            &lt;mdc-toolbar class="mdc-menu-anchor"&gt;
              &lt;mdc-menu&gt;
                ...
              &lt;/mdc-menu&gt;
            &lt;/mdc-toolbar&gt;

        p or a wrapper element that contains the actual visible element to attach to:
        pre
          code-prism.
            &lt;div class="mdc-menu-anchor"&gt;
              &lt;button mdc-button&gt;Open menu&lt;/button&gt;
              &lt;mdc-menu&gt;
                ...
              &lt;/mdc-menu&gt;
            &lt;/div&gt;
        p.
          Note: #[span.mark-text overflow: visible] and #[span.mark-text position: relative] will be set 
          on the element with #[span.mark-text mdc-menu-anchor] to ensure that the menu is positioned and 
          displayed correctly.

        p.
          The menu will check if its parent element has the #[span.mark-text mdc-menu-anchor] class set, 
          and if so, it will automatically position itself relative to this anchor element. 
          It will open from the top left (top right in RTL) corner of the anchor by default, 
          but will choose an appropriate different corner if close to the edge of the screen.
    

    // MANUAL POSITIONING
    mdc-grid-cell(span="12")
      section
        h5 Manual positioning
        p.
          The menu is #[span.mark-text position: absolute] by default, and must be positioned 
          by the user when doing manual positioning.

        pre
          code-prism.
            <div class="container">
              <mdc-menu style="top:0; left: 0;">
              ...
              </mdc-menu>
            </div>          

    mdc-grid-cell(span="6")
      pre
        code-prism(language="css").
          .demo-menu-manual {
            position: relative;
            border: 1px solid #eee; 
            margin: 0 0 32px 0;
            width: 256px; 
            height: 256px;
          }
          .demo-menu-topleft {
            position: absolute;
            top: 0;
            left: 0;
          }
          .demo-menu-topright {
            position: absolute;
            top: 0;
            right: 0;
          }
          ...

      pre
        code-prism.
          &lt;div class="demo-menu-manual"&gt;
            &lt;mdc-menu class="demo-menu-topright"&gt;
              ...
            &lt;/mdc-menu&gt;
          &lt;/div&gt;

          &lt;button mdc-button&gt;Open menu&lt;/button&gt;

    mdc-grid-cell(span="6")
      .demo-menu-manual
        mdc-menu.demo-menu-topleft(view-model.ref="menuElement41" anchor-corner="top-left")
          mdc-list-item Item 1
          mdc-list-item Item 2
          mdc-list-item Item 3

        mdc-menu.demo-menu-topright(view-model.ref="menuElement42" anchor-corner="top-right")
          mdc-list-item Item 1
          mdc-list-item Item 2
          mdc-list-item Item 3

        mdc-menu.demo-menu-bottomleft(view-model.ref="menuElement43" anchor-corner="bottom-left")
          mdc-list-item Item 1
          mdc-list-item Item 2
          mdc-list-item Item 3

        mdc-menu.demo-menu-bottomright(view-model.ref="menuElement44" anchor-corner="bottom-right")
          mdc-list-item Item 1
          mdc-list-item Item 2
          mdc-list-item Item 3

      br
      button(mdc-button="raised: true;" click.delegate="showMenu41()") Top Left
      br
      button(mdc-button="raised: true;" click.delegate="showMenu42()") Top Right
      br
      button(mdc-button="raised: true;" click.delegate="showMenu43()") Bottom Left
      br
      button(mdc-button="raised: true;" click.delegate="showMenu44()") Bottom Right


    // MENU OPENING POSITION
    mdc-grid-cell(span="12")
      section
        h5(id="menuanchorcorner") Menu anchor corner
        p.
          The menu will open from the top left by default (top right in RTL). 
          Depending on how you’ve positioned your button, you may want to change the 
          position it opens from. To override the opening position, you can style 
          #[span.mark-text transform-origin] directly, or use one of the following options:

    mdc-grid-cell(span="3")
      mdc-radio(
        name="menu-position"
        value="top-left"
        checked.bind="menuPosition"
      ) Top Left
      br
      mdc-radio(
        name="menu-position"
        value="top-right"
        checked.bind="menuPosition"
      ) Top Right
      br
      mdc-radio(
        name="menu-position"
        value="bottom-left"
        checked.bind="menuPosition"
      ) Bottom Left
      br
      mdc-radio(
        name="menu-position"
        value="bottom-right"
        checked.bind="menuPosition"
      ) Bottom Right

    mdc-grid-cell(span="9")
      style.
        .my-mdc-menu-anchor {
          position: absolute;
        }

      .mdc-menu-anchor.my-mdc-menu-anchor
        button(mdc-button="raised: true;" click.delegate="showMenu51()") Open Menu
        mdc-menu(view-model.ref="menuElement51" anchor-corner.bind="menuPosition")
          mdc-list-item Item 1
          mdc-list-item Item 2
          mdc-list-item Item 3

    mdc-grid-cell(span="12")
      pre
        code-prism.
          &lt;div class="mdc-menu-anchor"&gt;
            &lt;button mdc-button click.delegate="showMenu()"&gt;Open menu&lt;/button&gt;
            &lt;mdc-menu 
              anchor-corner="top-left / top-right / bottom-left / bottom-right"
              view-model.ref="menuElement"&gt;
              ...
            &lt;/mdc-menu&gt;
          &lt;/div&gt;
      
      pre
        code-prism(language="css").
          .mdc-menu-anchor {
            position: absolute;
          }          

    // ICON IN MENU ITEM
    mdc-grid-cell(span="12")
      h5(id="iconinmenuitem") Icon in menu item
    
    mdc-grid-cell(span="8")
      pre
        code-prism.
          &lt;mdc-menu ...&gt;
            &lt;mdc-list-item&gt;
              Item 1
              &lt;span slot="start"&gt;
                &lt;i class="material-icons" aria-hidden="true"&gt;network_wifi&lt;/i&gt;
              &lt;/span&gt;
            &lt;/mdc-list-item&gt;
            &lt;mdc-list-item&gt;
              Item 2
              &lt;span slot="start"&gt;
                &lt;i class="material-icons" aria-hidden="true"&gt;star&lt;/i&gt;
              &lt;/span&gt;
            &lt;/mdc-list-item&gt;
          &lt;/mdc-menu&gt;

    mdc-grid-cell(span="4")
      .mdc-menu-anchor
        button(mdc-button="raised: true;" click.delegate="showMenu6()") Open menu
        mdc-menu(view-model.ref="menuElement6")
          mdc-list-item 
            | Item 1
            span(slot="start")
              i.material-icons(aria-hidden="true") network_wifi                  
          mdc-list-item 
            | Item 2
            span(slot="start")
              i.material-icons(aria-hidden="true") star
